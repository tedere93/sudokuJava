/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sudokugame;

import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import static java.lang.System.out;
import java.nio.file.Paths;
import java.util.BitSet;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
//import java.text.SimpleDateFormat;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Tudi
 */

 
public class SudokuI extends javax.swing.JFrame implements MouseListener {

    private JButton[][] buttons;
    private ActionListener[][] actionListener;
    private JPanel[][] blocks;
    private Sudoku sudoku;
    private int gameMode;
    private int grid;
    private String[][] cells;
    private static final String FileOutputName = "SudokuOUT.out";
    private Object FileInputName;
    
    
    
    public SudokuI() {
        initComponents();
        sudoku = new Sudoku();
        gameMode = Sudoku.GAME_MODE_MEDIUM;
        grid = Sudoku.GRID_9X9;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        board = new javax.swing.JPanel();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        content = new javax.swing.JPanel();
        options = new javax.swing.JPanel();
        newgame = new javax.swing.JButton();
        resetgame = new javax.swing.JButton();
        submit = new javax.swing.JButton();
        holder = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        menu = new javax.swing.JMenuBar();
        game = new javax.swing.JMenu();
        menunew = new javax.swing.JMenuItem();
        menureset = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exit = new javax.swing.JMenuItem();
        level = new javax.swing.JMenu();
        menubegginer = new javax.swing.JMenuItem();
        menuintermediate = new javax.swing.JMenuItem();
        menuexpert = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        rules = new javax.swing.JMenuItem();

        jButton5.setText("jButton5");

        jButton4.setText("jButton4");

        board.setBackground(new java.awt.Color(255, 255, 255));
        board.setPreferredSize(new java.awt.Dimension(60, 60));
        board.setLayout(new java.awt.GridLayout(9, 9));

        jPopupMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPopupMenu1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPopupMenu1MouseReleased(evt);
            }
        });

        jMenuItem1.setText("jMenuItem1");
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("jMenuItem2");
        jPopupMenu1.add(jMenuItem2);

        jMenu1.setText("jMenu1");
        jPopupMenu1.add(jMenu1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        newgame.setText("New Game");
        newgame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newgameActionPerformed(evt);
            }
        });

        resetgame.setText("Reset");
        resetgame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetgameActionPerformed(evt);
            }
        });

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsLayout = new javax.swing.GroupLayout(options);
        options.setLayout(optionsLayout);
        optionsLayout.setHorizontalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newgame, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91)
                .addComponent(resetgame, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        optionsLayout.setVerticalGroup(
            optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(newgame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resetgame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(optionsLayout.createSequentialGroup()
                .addComponent(submit)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        holder.setBackground(new java.awt.Color(255, 255, 255));
        holder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                holderMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                holderMouseReleased(evt);
            }
        });
        holder.setLayout(new java.awt.GridLayout(1, 1));

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(holder, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(holder, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Empty Board");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Solve");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("jButton6");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        game.setText("Game");

        menunew.setText("New Game");
        menunew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menunewActionPerformed(evt);
            }
        });
        game.add(menunew);

        menureset.setText("Reset Game");
        menureset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuresetActionPerformed(evt);
            }
        });
        game.add(menureset);
        game.add(jSeparator1);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        game.add(exit);

        menu.add(game);

        level.setText("Level");

        menubegginer.setText("Beginner");
        menubegginer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menubegginerActionPerformed(evt);
            }
        });
        level.add(menubegginer);

        menuintermediate.setText("Intermediate");
        menuintermediate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuintermediateActionPerformed(evt);
            }
        });
        level.add(menuintermediate);

        menuexpert.setText("Expert");
        menuexpert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuexpertActionPerformed(evt);
            }
        });
        level.add(menuexpert);

        menu.add(level);

        help.setText("Help");

        rules.setText("Rules");
        rules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesActionPerformed(evt);
            }
        });
        help.add(rules);

        menu.add(help);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3)
                    .addComponent(jButton6)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(95, 95, 95)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addGap(275, 275, 275))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void menunewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menunewActionPerformed
        // TODO add your handling code here:
        grid = Sudoku.GRID_9X9;
        int[][] puzzle = sudoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }//GEN-LAST:event_menunewActionPerformed

    private void menuresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuresetActionPerformed
        // TODO add your handling code here:
        int[][] puzzle = sudoku.resetPuzzle();
        createBoard(puzzle);
    }//GEN-LAST:event_menuresetActionPerformed

    private void menubegginerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menubegginerActionPerformed
        // TODO add your handling code here:
        gameMode = Sudoku.GAME_MODE_EASY;
        int[][] puzzle = sudoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }//GEN-LAST:event_menubegginerActionPerformed

    private void menuintermediateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuintermediateActionPerformed
        // TODO add your handling code here:
        gameMode = Sudoku.GAME_MODE_MEDIUM;
        int[][] puzzle = sudoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }//GEN-LAST:event_menuintermediateActionPerformed

    private void menuexpertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuexpertActionPerformed
        // TODO add your handling code here:
        gameMode = Sudoku.GAME_MODE_EXPERT;
        int[][] puzzle = sudoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }//GEN-LAST:event_menuexpertActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void rulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rulesActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "The objective is to fill the 9×9 grid with digits so that each column, each row, and \neach of the nine 3×3 sub-grids that compose the grid contains all of the digits from 1 to 9.");
    }//GEN-LAST:event_rulesActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
        if (!isAnsComplete()) {
            JOptionPane.showMessageDialog(this, "Please complete your answer.");
        } else {

            boolean isAnsCorrect = sudoku.check(getAns());
            String messageStr = "";
            if (isAnsCorrect) {
                messageStr = "Congratulation You have won the Game!" ;
            } else {
                messageStr = "Sorry You have failed. ";
            }
            showMessage(messageStr);
        }
    }//GEN-LAST:event_submitActionPerformed

    private void resetgameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetgameActionPerformed
        // TODO add your handling code here:
        int[][] puzzle = sudoku.resetPuzzle();
        createBoard(puzzle);
    }//GEN-LAST:event_resetgameActionPerformed

    private void newgameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newgameActionPerformed
        // TODO add your handling code here:
        int[][] puzzle = sudoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }//GEN-LAST:event_newgameActionPerformed

    private void jPopupMenu1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopupMenu1MousePressed
        // TODO add your handling code here:
//        if(evt.isPopupTrigger()){
//            showPopupMenu(evt);
//        }
    }//GEN-LAST:event_jPopupMenu1MousePressed

    private void jPopupMenu1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopupMenu1MouseReleased
        // TODO add your handling code here:
//        if(evt.isPopupTrigger()){
//            showPopupMenu(evt);
//        }
    }//GEN-LAST:event_jPopupMenu1MouseReleased

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
//        if(evt.isPopupTrigger()){
//            showPopupMenu(evt);
//        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
//        if(evt.isPopupTrigger()){
//            showPopupMenu(evt);
//        }
    }//GEN-LAST:event_formMouseReleased

    private void holderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_holderMouseReleased
//        // TODO add your handling code here:
//        if(evt.isPopupTrigger()){
//            showPopupMenu(evt);
//        }
    }//GEN-LAST:event_holderMouseReleased

    private void holderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_holderMousePressed
//        // TODO add your handling code here:
//        if(evt.isPopupTrigger()){
//            showPopupMenu(evt);
//        }
    }//GEN-LAST:event_holderMousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        gameMode = Sudoku.GAME_MODE_IMPOSSIBLE;
        int[][] puzzle = sudoku.getNewPuzzle(grid, gameMode);
        createEmptyBoard(/*puzzle*/);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        ReadBOard();
        try {
            WritePuzzle();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SudokuI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(SudokuI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String[] args = null;
        try {
            SudokuBack.main(args);
        } catch (IOException ex) {
            Logger.getLogger(SudokuI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            // TODO add your handling code here:
            ReadShowSolution();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SudokuI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void createBoard(int[][] puzzle) {
        board.removeAll();
        grid = puzzle.length;
        blocks = new JPanel[grid][grid];
        buttons = new JButton[grid][grid];
        actionListener = new ActionListener[grid][grid];
        board.setLayout(new GridLayout(grid, grid, 3, 3));

        int rowsInGrid=3;

        for (int i = 0; i < grid; i++) {
            for (int j = 0; j < grid; j++) {
                blocks[i][j] = new JPanel();
                buttons[i][j] = new JButton();
                String text = "";
                if (0 < puzzle[i][j] && puzzle[i][j] <= grid) {
                    text += puzzle[i][j];
                } else {
                    final JButton tempbutton = buttons[i][j];
                    final JPanel tempBlock = blocks[i][j];
                    actionListener[i][j] = new ActionListener() {

                        public void actionPerformed(ActionEvent e) {
                            //viewInputs(tempBlock, tempbutton, grid);
                            //tempbutton.setText("1");
                            Choose(tempBlock,tempbutton);
                        }
                    };
                    buttons[i][j].addActionListener(actionListener[i][j]);
                    
                }
                buttons[i][j].setText(text);
                buttons[i][j].setFont(new java.awt.Font("Tahoma", 0, 24));

                if (((0 <= i && i < rowsInGrid) || (rowsInGrid * 2 <= i && i < grid)) && (3 <= j && j < 6)) {
                    buttons[i][j].setBackground(new java.awt.Color(204, 204, 204));
                } else if ((rowsInGrid <= i && i < rowsInGrid * 2) && ((0 <= j && j < 3) || (6 <= j && j < 9))) {
                    buttons[i][j].setBackground(new java.awt.Color(204, 204, 204));
                } else {
                    buttons[i][j].setBackground(new java.awt.Color(255, 255, 255));
                }
                blocks[i][j].setLayout(new GridLayout(1, 1));
                blocks[i][j].add(buttons[i][j]);
                board.add(blocks[i][j]);
            }
        }

        holder.removeAll();
        holder.add(board);
        board.repaint();
        holder.repaint();
        this.setVisible(true);
        
    }
    
    private void ReadBOard(){
        
        cells = new String[9][9];
         for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                cells[i][j]=buttons[i][j].getText();
            }
         }
//         System.out.print(cells[0][0]);
//         int cell;
//         cell = Integer.parseInt(cells[1][1]);
//         System.out.print(cell);
         for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if(cells[i][j]==""){
                    cells[i][j]="*";
                }
            }
         }
//         for (int i = 0; i < 9; i++) {
//            for (int j = 0; j < 9; j++) {
//                System.out.print(cells[i][j]);
//            } 
//            System.out.println();
//        }
    }
    
    
    private void WritePuzzle() throws FileNotFoundException, UnsupportedEncodingException{
        try (//        for (int i = 0; i < 9; i++) {
//            for (int j = 0; j < 9; j++) {
//                out.print(cells[i][j]);
//            }
//            out.println();
//        }
                PrintWriter writer = new PrintWriter("Sudoku1.txt", "UTF-8")) {
                for (int i = 0; i < 9; i++) {
                    for (int j = 0; j < 9; j++) {
                        writer.print(cells[i][j]);
                    }
                    writer.println();
                }
        }
    }
    
    
    private void createEmptyBoard(){
        board.removeAll();
        grid = 9;  //puzzle.length
        blocks = new JPanel[grid][grid];
        buttons = new JButton[grid][grid];
        actionListener = new ActionListener[grid][grid];
        board.setLayout(new GridLayout(grid, grid, 3, 3));
        
        int rowsInGrid=3;

        for (int i = 0; i < grid; i++) {
            for (int j = 0; j < grid; j++) {
                blocks[i][j] = new JPanel();
                buttons[i][j] = new JButton();
                String text = "";
//                if (0 < puzzle[i][j] && puzzle[i][j] <= grid) {
//                    text += puzzle[i][j];
//                } else {
                    final JButton tempbutton = buttons[i][j];
                    final JPanel tempBlock = blocks[i][j];
                    actionListener[i][j] = new ActionListener() {

                        public void actionPerformed(ActionEvent e) {
                            //viewInputs(tempBlock, tempbutton, grid);
                            //tempbutton.setText("1");
                            Choose(tempBlock,tempbutton);
                        }
                    };
                    buttons[i][j].addActionListener(actionListener[i][j]);
                    
//                }
                buttons[i][j].setText("");
                buttons[i][j].setFont(new java.awt.Font("Tahoma", 0, 24));
                

                if (((0 <= i && i < rowsInGrid) || (rowsInGrid * 2 <= i && i < grid)) && (3 <= j && j < 6)) {
                    buttons[i][j].setBackground(new java.awt.Color(204, 204, 204));
                } else if ((rowsInGrid <= i && i < rowsInGrid * 2) && ((0 <= j && j < 3) || (6 <= j && j < 9))) {
                    buttons[i][j].setBackground(new java.awt.Color(204, 204, 204));
                } else {
                    buttons[i][j].setBackground(new java.awt.Color(255, 255, 255));
                }
                blocks[i][j].setLayout(new GridLayout(1, 1));
                blocks[i][j].add(buttons[i][j]);
                board.add(blocks[i][j]);
            }
        }

        holder.removeAll();
        holder.add(board);
        board.repaint();
        holder.repaint();
        this.setVisible(true);
        
    }
    
    private void initialize() {
        int[][] puzzle = sudoku.getNewPuzzle(grid, gameMode);
        createBoard(puzzle);
    }
    
    private int[][] getAns() {
        int ans[][] = new int[grid][grid];

        for (int i = 0; i < grid; i++) {
            for (int j = 0; j < grid; j++) {
                try {
                    ans[i][j] = Integer.parseInt(buttons[i][j].getText());
                } catch (NumberFormatException e) {
                    ans[i][j] = 0;
                }
            }
        }

        return ans;
    }
    
    private boolean isAnsComplete() {
        boolean isAnsComplete = true;
        for (int i = 0; i < grid; i++) {
            for (int j = 0; j < grid; j++) {
                try {
                    Integer.parseInt(buttons[i][j].getText());
                } catch (NumberFormatException e) {
                    isAnsComplete = false;
                    break;
                }
            }
        }
        return isAnsComplete;
    }
    
    private void showMessage(String message) {
        JLabel messageLabel = new JLabel();
        messageLabel.setFont(new java.awt.Font("Tahoma", 1, 20));
        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageLabel.setText(message);
        holder.removeAll();
        holder.add(messageLabel);
        holder.repaint();
        this.setVisible(true);
    }
    
//        private void viewInputs(JPanel block, JButton inputButtton, int numOfInput) {
//            JPanel inputs = new Inputs(this, block, inputButtton, numOfInput);
//            block.remove(inputButtton);
//            block.add(inputs);
//            this.setVisible(true);
//        }
//
//        public void setInput(String ans, JPanel block, JButton inputButtton) {
//            block.removeAll();
//            inputButtton.setText(ans);
//            inputButtton.setFont(new java.awt.Font("Tahoma", 1, 24));
//            block.add(inputButtton);
//            this.repaint();
//        }
//        
//        private void showPopupMenu(java.awt.event.MouseEvent evt ){
//            jPopupMenu1.show(this,evt.getX(),evt.getY());
//        }
        
        private void ReadShowSolution() throws FileNotFoundException {
              Scanner s = null;
              String[][] sol = new String[9][9];
        try {
            s = new Scanner(new BufferedReader(new FileReader("SudokuOUT.txt")));
            while (s.hasNext())
            {   
               for(int i=0;i<9;i++){
                   for(int j=0;j<9;j++){
                     sol[i][j] = s.next();  
                   }
               }
            }
            for(int i=0;i<9;i++){
                   for(int j=0;j<9;j++){
                     System.out.print(sol[i][j]);  
                   }
                   System.out.println();
               }
            
        } finally {
            if (s != null) {
                s.close();
            }
        }
        for(int i=0;i<9;i++){
                   for(int j=0;j<9;j++){
                       buttons[i][j].setText(sol[i][j]);
                   }
                     
               }
        
        }
        
            
    
    
    
        private void Choose(JPanel block,JButton inputButtton){
            String[] choices= {"1","2","3","4","5","6","7","8","9","Clear"};
            int response=JOptionPane.showOptionDialog(this, "What number?", "Select One", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, choices, choices[0]);
            Font font = new Font("Tahoma", Font.BOLD,22);
            if (response == 0){
                inputButtton.setText("1");
                
            }
            else if (response == 1){
                inputButtton.setText("2");
            }
            else if (response == 2){
                inputButtton.setText("3");
            }
            else if (response == 3){
                inputButtton.setText("4");
            }
            else if (response == 4){
                inputButtton.setText("5");
            }
            else if (response == 5){
                inputButtton.setText("6");
            }
            else if (response == 6){
                inputButtton.setText("7");
            }
            else if (response == 7){
                inputButtton.setText("8");
            }
            else if (response == 8){
                inputButtton.setText("9");
            }
            else if (response == 9){
                inputButtton.setText("");
            }
            else
                inputButtton.setText("");
        }
        
        
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SudokuI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SudokuI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SudokuI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SudokuI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SudokuI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel board;
    private javax.swing.JPanel content;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu game;
    private javax.swing.JMenu help;
    private javax.swing.JPanel holder;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenu level;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenuItem menubegginer;
    private javax.swing.JMenuItem menuexpert;
    private javax.swing.JMenuItem menuintermediate;
    private javax.swing.JMenuItem menunew;
    private javax.swing.JMenuItem menureset;
    private javax.swing.JButton newgame;
    private javax.swing.JPanel options;
    private javax.swing.JButton resetgame;
    private javax.swing.JMenuItem rules;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mousePressed(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
